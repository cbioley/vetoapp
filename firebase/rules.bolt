// An example of Firebase security and modeling language.
// https://github.com/firebase/bolt/blob/master/docs/guide.md

// Functions

isSignedIn() { auth != null }
isViewer(uid) { isSignedIn() && auth.uid == uid }

// Types

type ShortString extends String {
  validate() { this.length <= 100 }
}

type ShortRequiredString extends String {
  // Required form field with maxLength="100".
  validate() { this.length > 0 && this.length <= 100 }
}

type LongString extends String {
  validate() { this.length <= 1000 }
}

type LongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 1000 }
}

type ExtraLongString extends String {
  validate() { this.length <= 10000 }
}

type ExtraLongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 10000 }
}

type User {
  authenticatedAt: Number,
  displayName: LongString,
  id: ShortRequiredString,
  profileImageURL: LongString,
  provider: LongString
}

type Email {
  email: ShortRequiredString
}

type Veto {
  country: ShortRequiredString,
  createdAt: Number,
  creatorDisplayName: ShortRequiredString,
  creatorId: ShortRequiredString,
  creatorProfileImageURL: LongString,
  id: ShortRequiredString,
  municipality: ShortString,
  name: LongRequiredString,
  reason: ExtraLongRequiredString,
  updatedAt: Number
}

// Paths. Can be nested.
// https://www.firebase.com/blog/2016-01-12-whats-new-in-bolt-07.html

path /users {
  index() { ["authenticatedAt"] }
  read() { true }
}

path /users/{uid} is User {
  write() { isViewer(uid) }
}

path /users-emails/{uid} is Email {
  read() { isViewer(uid) }
  write() { isViewer(uid) }
}

path /vetos {
  index() { ["createdAt", "creatorId"] }
  read() { true }
}

path /vetos/{id} is Veto {
  // https://www.firebase.com/blog/2016-01-26-easier-write-rules-bolt.html
  create() { isViewer(this.creatorId) && this.id == id }
  delete() { isViewer(prior(this).creatorId) }
  update() {
    isViewer(this.creatorId) && this.id == id &&
    isViewer(prior(this).creatorId)
  }
}

path /vetos-archived/{id} is Veto {
  create() { isViewer(this.creatorId) && this.id == id }
  delete() { isViewer(prior(this).creatorId) }
}
