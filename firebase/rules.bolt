// https://github.com/firebase/bolt/blob/master/docs/language.md

// Functions

isAdmin() { root.roles.admins[auth.uid] != null }
isQueue() { root.roles.queues[auth.uid] != null }
isSignedIn() { auth != null }
isViewer(uid) { isSignedIn() && auth.uid == uid }
userExits(uid) { root.users[uid] != null }
vetoExits(id) { root.vetos[id] != null }

// Types

type ShortString extends String {
  validate() { this.length <= 100 }
}

type ShortRequiredString extends String {
  // Required form field with maxLength="100".
  validate() { this.length > 0 && this.length <= 100 }
}

type LongString extends String {
  validate() { this.length <= 1000 }
}

type LongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 1000 }
}

type ExtraLongString extends String {
  validate() { this.length <= 10000 }
}

type ExtraLongRequiredString extends String {
  validate() { this.length > 0 && this.length <= 10000 }
}

// https://github.com/firebase/firebase-queue#queue-security
type FirebaseQueueStateErrorDetails {
  attempts: Number,
  error: String,
  error_stack: String,
  original_task: Any | Null,
  previous_state: String
}

// https://github.com/firebase/firebase-queue#queue-security
type FirebaseQueueState {
  _error_details: FirebaseQueueStateErrorDetails,
  _id: String,
  _owner: String,
  _progress: Number,
  _state: String,
  _state_changed: Number
}

type User {
  authenticatedAt: Number,
  displayName: LongRequiredString,
  id: ShortRequiredString,
  profileImageURL: LongString,
  provider: ShortRequiredString
}

type Email {
  email: ShortRequiredString
}

type Veto {
  country: ShortRequiredString,
  createdAt: Number,
  creatorDisplayName: ShortRequiredString,
  creatorId: ShortRequiredString,
  creatorProfileImageURL: LongString,
  id: ShortRequiredString,
  municipality: ShortString,
  name: LongRequiredString,
  reason: ExtraLongRequiredString,
  updatedAt: Number

  validate() { isAdmin() || isViewer(this.creatorId) }
}

type Vote {
  createdAt: Number,
  userId: ShortRequiredString,
  vetoCountry: ShortRequiredString,
  vetoCreatorDisplayName: ShortRequiredString,
  vetoCreatorId: ShortRequiredString,
  vetoId: ShortRequiredString,
  vetoMunicipality: ShortString,
  vetoName: LongRequiredString,
  yes: Boolean

  validate() {
    userExits(this.userId) && vetoExits(this.vetoId)
  }
}

type VoteTotal {
  total: Number,
  updatedAt: Number,
  vetoCountry: ShortRequiredString,
  vetoCreatorDisplayName: ShortRequiredString,
  vetoCreatorId: ShortRequiredString,
  vetoId: ShortRequiredString,
  vetoMunicipality: ShortString,
  vetoName: LongRequiredString
}

// Paths.

path /roles/admins/{uid} {
  read() { isViewer(uid) }
}

path /users {
  index() { ["authenticatedAt"] }
  read() { true }

  path /{uid} is User {
    write() { isViewer(uid) }
  }
}

path /users-emails/{uid} is Email {
  read() { isViewer(uid) }
  write() { isViewer(uid) }
}

path /vetos {
  index() { ["createdAt", "creatorId"] }
  read() { true }

  path /{id} is Veto {
    // https://www.firebase.com/blog/2016-01-26-easier-write-rules-bolt.html
    create() { this.id == id }
    delete() { isAdmin() || isViewer(prior(this).creatorId) }
    update() { this.id == id && (isAdmin() || isViewer(prior(this).creatorId)) }
  }
}

path /vetos-archived/{id} is Veto {
  create() { this.id == id }
  delete() { isViewer(prior(this).creatorId) }
}

path /vetos-votes-queue {
  path /tasks {
    index() { ["_state"] }
    read() { isQueue() }

    path /{id} is Vote | FirebaseQueueState {
      write() { isViewer(this.userId) || isQueue() }
    }
  }
  // TODO: Add specs.
}

path /vetos-votes {
  index() { ["userId", "vetoId"] }
  read() { true }

  path /{yesOrNo}/{vetosOrVotes}/{vetoIdOrUserId} {
    index() { ["createdAt"] }
    path /{userIdOrVetoId} is Vote {
      write() { isQueue() }
    }
  }
}

path /vetos-votes-yes-total {
  read() { true }

  path /{vetoCountryOrAll} {
    index() { ["total"] }
    path /{vetoId} is VoteTotal {
      write() { isQueue() }
    }
  }
}
